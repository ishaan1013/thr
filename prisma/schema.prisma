// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Post {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  repost    Repost?
  createdAt DateTime @default(now())
  likes     Likes[]

  parentId String?
  parent   Post?   @relation("ParentChildren", fields: [parentId], references: [id])
  children Post[]  @relation("ParentChildren")
}

model Repost {
  id     String @id @default(cuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String @unique

  reposter   User   @relation(fields: [reposterId], references: [id])
  reposterId String
}

model User {
  id         String   @id
  username   String   @unique
  name       String
  image      String
  bio        String
  posts      Post[]
  reposts    Repost[]
  likes      Likes[]
  followedBy User[]   @relation("UserFollows")
  following  User[]   @relation("UserFollows")

  blockedBy User[] @relation("UserBlocks")
  blocked   User[] @relation("UserBlocks")

  onboarded Boolean @default(false)
}

model Likes {
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
}
